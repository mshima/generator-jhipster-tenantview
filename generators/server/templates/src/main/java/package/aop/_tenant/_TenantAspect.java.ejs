package <%=storage.packageName%>.aop.<%= tenant.entityInstance %>;

import <%=storage.packageName%>.web.rest.errors.BadRequestAlertException;
import <%=storage.packageName%>.security.SecurityUtils;
import <%=storage.packageName%>.repository.UserRepository;
import <%=storage.packageName%>.domain.User;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.hibernate.Session;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.hibernate.Filter;
import java.util.Optional;

@Aspect
@Component
public class <%= tenant.entityClass %>Aspect {

    @PersistenceContext
    private EntityManager entityManager;

    @Autowired
    private UserRepository userRepository;

    private final String fieldName =  "<%= tenant.entityInstance %>Id";

    private final Logger log = LoggerFactory.getLogger(<%= tenant.entityClass %>Aspect.class);

    /**
     * Run method if User service is hit.
     * Filter users based on which <%= tenant.entityClass %> the user is associated with.
     * Skip filter if user has no <%= tenant.entityClass %>
     */
    @Before("execution(* <%= storage.packageName %>.service.UserService.*(..)) "
            // jhipster-needle-add-entity-to-tenant-aspect - Multitenancy will roles here
        )
    public void beforeExecution() throws Throwable {
        Optional<String> login = SecurityUtils.getCurrentUserLogin();

        if(login.isPresent()) {
            Optional<User> optionalUser = userRepository.findOneByLogin(login.get());
            if(!optionalUser.isPresent()) {
                // Self registration.
                throw new BadRequestAlertException("Self registration is disabled", "userRegistration", "selfregistrationdisabled");
            }
            User user = optionalUser.get();

            if (user.get<%= tenant.entityClass %>().getId() != 0) {
                Filter filter = entityManager.unwrap(Session.class).enableFilter("<%= tenant.entityUpperCase %>_FILTER");
                filter.setParameter(fieldName, user.get<%= tenant.entityClass %>().getId());
            }
        }
    }
}
