package <%- packageName %>.aop.<%- tenantEntity.entityNameLowerCase %>;

import <%- packageName %>.domain.<%- entityClass %>;
import <%- packageName %>.repository.<%- entityClass %>Repository;

import java.util.Optional;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.security.access.AccessDeniedException;

@Aspect
@Component
public class <%- tenantEntity.entityClass %>Aware<%- entityClass %>Aspect extends <%- tenantEntity.entityClass %>AwareAspect {

    private final Logger log = LoggerFactory.getLogger(<%- tenantEntity.entityClass %>Aware<%- entityClass %>Aspect.class);

    @Pointcut("target(<%- packageName %>.repository.<%- entityClass %>Repository)")
    private void <%- entityInstance %>RepositoryAsTarget() {} 

    @Pointcut("execution(* *.deleteById(..))")
    private void deleteByIdOperation() {}

    @Pointcut("execution(* *.findById(..))")
    private void findByIdOperation() {}

    @Pointcut("execution(* *.save(..)) || " + "execution(* *.saveAndFlush(..)) || " + "execution(* *.delete(..))")
    private void anyOperationWithBean() {}

    @Pointcut(
        "execution(* *.findAll(..)) || " +
        "execution(* *.count(..)) || " +
        "execution(* *.findOneByEmailIgnore(..)) || " +
        "execution(* *.findOneByEmailIgnoreCase(..)) || " +
        "execution(* *.findOneByResetKey(..)) || " +
        "execution(* *.findAllByActivatedIsFalseAndActivationKeyIsNotNullAndCreatedDateBefore(..)) || " +
        "execution(* *.findAllByLoginNot(..)) "
    )
    private void anyFilteredOperation() {}

    @Pointcut(
        "execution(* *.findOneByLogin(..)) || " +
        "execution(* *.findOneWithAuthoritiesByLogin(..)) || " +
        "execution(* *.findOneWithAuthoritiesByEmailIgnoreCase(..))"
    )
    private void ignoredMethods() {}

    @Pointcut(
        "ignoredMethods() || " +
        "anyOperationWithBean() || " +
        "anyFilteredOperation() || " +
        "findByIdOperation() || " +
        "deleteByIdOperation()"
    )
    private void anySecured() {}

    @Pointcut("userRepositoryAsTarget() && !anySecured()")
    private void notSecured() {}

    @Before(value = "<%- entityInstance %>RepositoryAsTarget() && anyOperationWithBean()")
    public void anyOperationWithBean(JoinPoint jp) {
        <%- entityClass %> bean = (<%- entityClass %>) jp.getArgs()[0];
        log.info("anyOperationWithBean: {}", bean);
        this.assertThatCurrentTenantExists();

        if (this.isCurrentUserRootAdmin()) {
            if (bean.get<%- tenantEntity.entityClass %>() == null) {
                bean.setTenant(newCurrentTenantInstance());
            }
            return;
        }

        if (bean.get<%- tenantEntity.entityClass %>() != null) {
            if (this.beanTenantMatchesCurrentTenantIdentifier(bean)) {
                return;
            }
            log.error(
                "Manipulating an User from another Tenant isn't allowed {}, {}",
                bean.get<%- tenantEntity.entityClass %>().getId(),
                currentTenantIdentifier.getEffectiveTenantId()
            );
            throw new org.springframework.security.access.AccessDeniedException("Not allowed");
        }
        bean.set<%- tenantEntity.entityClass %>(newCurrentTenantInstance());
    }

    @Around(value = "<%- entityInstance %>RepositoryAsTarget() && deleteByIdOperation()")
    public void deleteById(ProceedingJoinPoint jp) throws Throwable {
        <%- primaryKey.type %> id = (<%- primaryKey.type %>) jp.getArgs()[0];
        log.info("onDeleteById: {}", id);
        this.assertThatCurrentTenantExists();
        if (this.shouldBypassAllOperationFiltering()) {
            jp.proceed();
            return;
        }
        ((<%- entityClass %>Repository) jp.getTarget()).deleteByIdAnd<%- tenantEntity.entityClass %>(id, newCurrent<%- tenantEntity.entityClass %>Instance());
    }

    @SuppressWarnings("unchecked")
    @Around(value = "<%- entityInstance %>RepositoryAsTarget() && findByIdOperation()")
    public Optional<<%- entityClass %>> findById(ProceedingJoinPoint jp) throws Throwable {
        <%- primaryKey.type %> id = (<%- primaryKey.type %>) jp.getArgs()[0];
        log.info("onFindById: {}", id);
        this.assertThatCurrentTenantExists();
        if (this.shouldBypassAllOperationFiltering()) {
            return (Optional<<%- entityClass %>>) jp.proceed();
        }
        return ((<%- entityClass %>Repository) jp.getTarget()).findByIdAnd<%- tenantEntity.entityClass %>(id, newCurrent<%- tenantEntity.entityClass %>Instance());
    }

    @Before(value = "userRepositoryAsTarget() && ignoredMethods()")
    public void ignoredMethods(JoinPoint jp) {
        log.info("AOP operation ignored: {}", jp);
    }

    @Before(value = "<%- entityInstance %>RepositoryAsTarget() && anyFilteredOperation()")
    public void anyFilteredOperation(JoinPoint jp) throws Throwable {
        log.info("Adding filter for {}", jp);
        this.assertThatCurrentTenantExists();
        // Root <%- tenantEntity.entityClass %> ignore filtering
        if (this.shouldBypassAllOperationFiltering()) {
            return;
        }
        this.setupJpaFiltering();
    }

    @Before(value = "<%- entityInstance %>RepositoryAsTarget() && !anySecured()")
    public void notSecured(JoinPoint jp) {
        log.error("AOP operation not secured: {}", jp);
        log.error("getStaticPart: {}", jp.getStaticPart());
        log.error("getThis: {}", jp.getThis());
        log.error("getTarget: {}", jp.getTarget());
        if (this.isCurrentUserRootAdmin()) {
            return;
        }

        throw new org.springframework.security.access.AccessDeniedException("Not allowed");
    }
}
