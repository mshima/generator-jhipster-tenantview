package <%- packageName %>.config.<%- tenantEntity.entityNameLowerCase %>;

import <%- packageName %>.domain.Tenant;
import <%- packageName %>.repository.UserRepository;
import <%- packageName %>.security.SecurityUtils;
import jakarta.servlet.http.HttpServletRequest;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.security.access.AccessDeniedException;
import org.springframework.web.context.WebApplicationContext;

@Configuration
public class <%- tenantEntity.entityClass %>AwareSessionConfiguration {

    private final Logger log = LoggerFactory.getLogger(<%- tenantEntity.entityClass %>AwareSessionConfiguration.class);

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private HttpServletRequest request;

    @Bean
    @Scope(value = WebApplicationContext.SCOPE_REQUEST, proxyMode = ScopedProxyMode.TARGET_CLASS)
    public TenantIdentifier currentTenantIdentifier() {
        var userLogin = SecurityUtils
            .getCurrentUserLogin()
            .orElseThrow(() -> {
                log.error("Current context does not have an authentication");
                return new AccessDeniedException("Not allowed");
            });
        log.info("Creating session bean for: {}", userLogin);
        var user = userRepository
            .findOneByLogin(userLogin)
            .orElseThrow(() -> {
                log.error("Could not fetch current login from database {}", userLogin);
                return new AccessDeniedException("Not allowed");
            });

<%_ if (!tenantEntity.builtInUser) { _%>
        if (user.get<%- tenantEntity.entityClass %>() == null) {
            log.error("Current user does not have a <%- tenantEntity.entityClass %>");
            throw new AccessDeniedException("Not allowed");
        }
<%_ } _%>

        var tenantIdHeader = request.getHeader("X-Tenant-ID");
        Long selectedTenantId = null;
        if (tenantIdHeader != null && tenantIdHeader.length() > 0) {
            selectedTenantId = Long.parseLong(tenantIdHeader);
            if (selectedTenantId < 1) {
                selectedTenantId = null;
            }
        }

<%_ if (tenantEntity.builtInUser) { _%>
        return new TenantIdentifier(
            user.get<%- tenantEntity.primaryKey.nameCapitalized %>(),
            SecurityUtils.hasCurrentUserThisAuthority("ROLE_ADMIN")
        ).selectedTenantId(selectedTenantId);
<%_ } else { _%>

        return new TenantIdentifier(
            user.get<%- tenantEntity.entityClass %>().getId(),
            user.get<%- tenantEntity.entityClass %>().getId() == 0
        ).selectedTenantId(selectedTenantId);
<%_ } _%>
    }
}
