package <%- packageName %>;

import <%- packageName %>.config.<%- tenantEntity.entityNameLowerCase %>.TenantIdentifier;
import <%- packageName %>.domain.Authority;
import <%- packageName %>.domain.User;
import <%- packageName %>.repository.UserRepository;
import <%- packageName %>.security.AuthoritiesConstants;

import java.util.Collections;
import org.springframework.context.ApplicationContext;

public class TenantIntegrationTestUtils {

    private TenantIntegrationTestUtils() {}

    public static final String DEFAULT_TENANT_USER = "tenant-user";

    public static final String DEFAULT_TENANT_USER_AUTHORITY = "ROLE_USER";

    public static final String DEFAULT_TENANT_ADMIN_USER = "admin";

    public static final String DEFAULT_TENANT_ADMIN_USER_AUTHORITY = "ROLE_ADMIN";

    public static void setupTenant(ApplicationContext applicationContext) {
        var userRepository = applicationContext.getBean(UserRepository.class);
        final User user;
        if (userRepository.existsByLogin(DEFAULT_TENANT_USER)) {
            user = userRepository.findOneByLogin(DEFAULT_TENANT_USER).orElseThrow();
        } else {
            User newUser = new User();
            newUser.setLogin(DEFAULT_TENANT_USER);
            newUser.setEmail(DEFAULT_TENANT_USER + "@example.com");
            newUser.setPassword("f".repeat(60));
            newUser.setAuthorities(Collections.singleton(new Authority().name(AuthoritiesConstants.USER)));
            user = userRepository.save(newUser);
        }

        var currentTenantIdentifier = applicationContext.getBean("currentTenantIdentifier", TenantIdentifier.class);
        currentTenantIdentifier.selectedTenantId(user.getId());
    }

    public static void tearDownTenant(ApplicationContext applicationContext) {
        var userRepository = applicationContext.getBean(UserRepository.class);

        var currentTenantIdentifier = applicationContext.getBean("currentTenantIdentifier", TenantIdentifier.class);
        currentTenantIdentifier.selectedTenantId(0l);

        if (userRepository.existsByLogin(DEFAULT_TENANT_USER)) {
            User user = userRepository.findOneByLogin(DEFAULT_TENANT_USER).orElseThrow();
            userRepository.delete(user);
        }
    }
}
