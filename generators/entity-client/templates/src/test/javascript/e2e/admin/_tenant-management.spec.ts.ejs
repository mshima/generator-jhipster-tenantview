<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import { browser, ExpectedConditions as ec, promise } from 'protractor';
import { NavBarPage, SignInPage } from '../../page-objects/jhi-page-objects';

import { <%= tenant.entityClass %><%= angularTenantComponentSuffix %>ComponentsPage, <%= tenant.entityClass %><%= angularTenantComponentSuffix %>UpdatePage } from './<%= tenantFileName %>.page-object';

const expect = chai.expect;

describe('<%= tenantFileName %> e2e test', () => {

    let navBarPage: NavBarPage;
    let signInPage: SignInPage;
    let <%= tenant.entityInstance %><%= angularTenantComponentSuffix %>UpdatePage: <%= tenant.entityClass %><%= angularTenantComponentSuffix %>UpdatePage;
    let <%= tenant.entityInstance %><%= angularTenantComponentSuffix %>ComponentsPage: <%= tenant.entityClass %><%= angularTenantComponentSuffix %>ComponentsPage;

    before(async () => {
        await browser.get('/');
        navBarPage = new NavBarPage(true);
        signInPage = await navBarPage.getSignInPage();
        await signInPage.autoSignInUsing('admin', 'admin');
        await browser.wait(ec.visibilityOf(navBarPage.adminMenu), 5000);
    });

    it('should load <%= tenant.entityInstance %> management', async () => {
        await navBarPage.clickOnAdminMenu();
        await navBarPage.clickOnAdmin('<%= tenantFileName %>');
        <%= tenant.entityInstance %><%= angularTenantComponentSuffix %>ComponentsPage = new <%= tenant.entityClass %><%= angularTenantComponentSuffix %>ComponentsPage();
        await browser.wait(ec.visibilityOf(<%= tenant.entityInstance %><%= angularTenantComponentSuffix %>ComponentsPage.title), 5000);
        expect(await <%= tenant.entityInstance %><%= angularTenantComponentSuffix %>ComponentsPage.getTitle()).to.eq('<%= angularAppName %>.<%= entityTranslationKey %>.home.title');
    });

    it('should load create <%= tenant.entityInstance %> management page', async () => {
        await <%= tenant.entityInstance %><%= angularTenantComponentSuffix %>ComponentsPage.clickOnCreateButton();
        <%= tenant.entityInstance %><%= angularTenantComponentSuffix %>UpdatePage = new <%= tenant.entityClass %><%= angularTenantComponentSuffix %>UpdatePage();
        expect(await <%= tenant.entityInstance %><%= angularTenantComponentSuffix %>UpdatePage.getPageTitle()).to.eq('<%= angularAppName %>.<%= entityTranslationKey %>.home.createOrEditLabel');
        expect(await browser.getCurrentUrl()).to.match(new RegExp('.*/<%= tenantStateName %>/new'));
        await <%= tenant.entityInstance %><%= angularTenantComponentSuffix %>UpdatePage.cancel();
    });

    it('should create and save <%= tenant.entityInstance %> management', async () => {
        const nbButtonsBeforeCreate = await <%= tenant.entityInstance %><%= angularTenantComponentSuffix %>ComponentsPage.countDeleteButtons();

        await <%= tenant.entityInstance %><%= angularTenantComponentSuffix %>ComponentsPage.clickOnCreateButton();
        await promise.all([<%= tenant.entityInstance %><%= angularTenantComponentSuffix %>UpdatePage.setNameInput('new <%= tenant.entityInstance %>')]);
        expect(await <%= tenant.entityInstance %><%= angularTenantComponentSuffix %>UpdatePage.getNameInput()).to.eq('new <%= tenant.entityInstance %>', 'Expected Name value to be equals to name');
        await <%= tenant.entityInstance %><%= angularTenantComponentSuffix %>UpdatePage.save();

        expect(await <%= tenant.entityInstance %><%= angularTenantComponentSuffix %>ComponentsPage.countDeleteButtons()).to.eq(nbButtonsBeforeCreate + 1, 'Expected one more entry in the table');
        expect(await browser.getCurrentUrl()).to.match(new RegExp('.*/<%= tenantStateName %>'));
    });

    after(async () => {
        await navBarPage.autoSignOut();
    });
});
